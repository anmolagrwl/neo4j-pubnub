{
  "author": {
    "name": "Jon Packer",
    "email": "contact@jonpacker.com",
    "url": "http://www.jonpacker.com"
  },
  "name": "naan",
  "description": "async and flexible currying for js",
  "version": "1.3.11",
  "homepage": "https://github.com/jonpacker/naan",
  "repository": {
    "type": "git",
    "url": "git://github.com/jonpacker/naan.git"
  },
  "main": "naan.js",
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha -R spec",
    "setup-browser-tests": "git submodule update --init --recursive",
    "minify": "node node_modules/uglify-js/bin/uglifyjs -o naan.min.js naan.js"
  },
  "dependencies": {
    "async": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "uglify-js": "*"
  },
  "readme": "# naan.js\n\nNaan.js is a library that provides a set of useful functions for creating\npartially applied functions. It was originally created to work with\n[node.js](http://nodejs.org) but also works in the browser, so long as you have\nalso included the [async](https://github.com/caolan/async) module.\n\nThe best way to understand what naan does is to see it in action:\n\n## Quick Examples\n```javascript\n\nvar statFoo = naan.curry(fs.stat, 'foo.txt');\nstatFoo(function(err, data) {\n  // stat result from foo\n});\n\nvar renameToFoo = naan.positionCurry(fs.rename, fs.rename, 'foo.txt', 1);\nrenameToFoo('bar.txt', function(err) {\n  // 'bar.txt' has been renamed to 'foo.txt'\n})\n\nvar readFooContents = naan.curry(fs.readFile, 'foo.txt');\nvar writeFooContents = naan.cook(fs.writeFile, readFooContents, 1);\nwriteFooContents('bar.txt', function(err) {\n  // The contents of 'foo.txt' has been written to 'bar.txt'\n})\n\n// Naan works great with Async!\nvar readers = ['foo.txt', 'bar.txt', 'bob.txt'].map(function(file) {\n  return naan.curry(fs.readFile)\n});\nasync.parallel(readers, function(err, contents) {\n  // contents == contents of foo.txt, bar.txt & bob.txt\n});\n\n```\n\nThese are a few of the basic uses of Naan. Each of the available functions are\nlisted below.\n\n## Download\n\nFor node, just use npm:\n\n    npm install naan\n\n## In the Browser\n\nTested in IE9+. It currently uses some ES5 stuff which doesn't work in IE8, but this will be\nfixed shortly.\n\nFor info on how to test in the browser, see [testing](#testing).\n\n```html\n<script src=\"async.min.js\"></script>\n<script src=\"naan.min.js\"></script>\n<script>\n  var createDiv = naan.curry(document.createElement, 'div');\n</script>\n```\n\n__Development:__ [naan.js](https://github.com/jonpacker/naan/raw/master/naan.js) - 9.5kb Uncompressed\n\n__Production:__ [naan.min.js](https://github.com/caolan/async/raw/master/naan.min.js) - 3.0kb Minified\n\n## Documentation\n\n### Curries\n\n* [curry](#curry)\n* [rightCurry](#rightCurry)\n* [curryArgs](#curryArgs)\n* [curryArgsRight](#curryArgsRight)\n* [positionCurry](#positionCurry)\n* [entangleCurry](#entangleCurry)\n\n### Cooking\n\n* [cook](#cook)\n\n### Return control\n\n* [alwaysReturn](#alwaysReturn)\n\n### Group Curries\n\n* [crock](#crock)\n* [combine](#combine)",
  "readmeFilename": "README.md",
  "_id": "naan@1.3.11",
  "dist": {
    "shasum": "8cd1edbdd1e267ff7288c5a710a46ae0ae4ea371",
    "tarball": "http://registry.npmjs.org/naan/-/naan-1.3.11.tgz"
  },
  "_from": "naan@>=1.3.11 <1.4.0",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "jonpacker",
    "email": "contact@jonpacker.com"
  },
  "maintainers": [
    {
      "name": "jonpacker",
      "email": "contact@jonpacker.com"
    }
  ],
  "directories": {},
  "_shasum": "8cd1edbdd1e267ff7288c5a710a46ae0ae4ea371",
  "_resolved": "https://registry.npmjs.org/naan/-/naan-1.3.11.tgz",
  "bugs": {
    "url": "https://github.com/jonpacker/naan/issues"
  }
}
